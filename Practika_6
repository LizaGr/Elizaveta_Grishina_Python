pip install NeuroLab

import matplotlib.pyplot as plt
import neurolab as nl

input = [[0, 0], [0, 1], [1, 0], [1, 1]] 
target = [[0], [0], [0], [1]]

net = nl.net.newp([[0, 1],[0, 1]], 1) #создание сети с двумя входами и одним нейроном

error_progress = net.train(input, target, epochs=100, show=10, lr=0.1) #тренировка

plt.figure()
plt.plot(error_progress)
plt.xlabel('Number of epochs')
plt.ylabel('Training error')
plt.grid()
plt.show()



pip install NeuroLab

import numpy as np
import matplotlib.pyplot as plt
import neurolab as nl

input_data = np.loadtxt(“C:/Users/LizaGr/Desktop/neural_simple.txt')

array([[2. , 4. , 0. , 0. ],
 [1.5, 3.9, 0. , 0. ],
 [2.2, 4.1, 0. , 0. ],
 [1.9, 4.7, 0. , 0. ],
 [5.4, 2.2, 0. , 1. ],
 [4.3, 7.1, 0. , 1. ],
 [5.8, 4.9, 0. , 1. ],
 [6.5, 3.2, 0. , 1. ],
 [3. , 2. , 1. , 0. ],
 [2.5, 0.5, 1. , 0. ],
 [3.5, 2.1, 1. , 0. ],
 [2.9, 0.3, 1. , 0. ],
 [6.5, 8.3, 1. , 1. ],
 [3.2, 6.2, 1. , 1. ],
 [4.9, 7.8, 1. , 1. ],
 [2.1, 4.8, 1. , 1. ]])

data = input_data[:, 0:2] # делим array на два стобца данных и 2 столбца меток
labels = input_data[:, 2:]

plt.figure()
plt.scatter(data[:,0], data[:,1])
plt.xlabel('Dimension 1')
plt.ylabel('Dimension 2')
plt.title('Input data') 

dim1_min, dim1_max = data[:,0].min(), data[:,0].max() # min and max значение для каждого измерения
dim2_min, dim2_max = data[:,1].min(), data[:,1].max()

nn_output_layer = labels.shape[1] #количество нейронов в выходном слое

dim1 = [dim1_min, dim1_max] #определяем однослойную нейронную сеть
dim2 = [dim2_min, dim2_max]
neural_net = nl.net.newp([dim1, dim2], nn_output_layer)

error = neural_net.train(data, labels, epochs = 200, show = 20, lr = 0.01

plt.figure()
plt.plot(error)
plt.xlabel('Number of epochs')
plt.ylabel('Training error')
plt.title('Training error progress')
plt.grid()
plt.show()

print('\nTest Results:')
data_test = [[1.5, 3.2], [3.6, 1.7], [3.6, 5.7],[1.6, 3.9]] for item in data_test:
    print(item, '-->', neural_net.sim([item])[0])
    
    
    
    
    pip install NeuroLab

import numpy as np
import matplotlib.pyplot as plt
import neurolab as nl

min_val = -30 #некоторая точка данных y=2x^2+8
max_val = 30
num_points = 160
x = np.linspace(min_val, max_val, num_points)
y = 2 * np.square(x) + 8
y /= np.linalg.norm(y)

data = x.reshape(num_points, 1) #измена набора данных
labels = y.reshape(num_points, 1)

plt.figure()
plt.scatter(data, labels)
plt.xlabel('Dimension 1')
plt.ylabel('Dimension 2')
plt.title('Data-points')


neural_net = nl.net.newff([[min_val, max_val]], [10, 6, 1])  #создаём нейронную сеть, имеющую два скрытых слоя с нейролабом с десятью нейронами в первом скрытом слое, шесть во втором скрытом слое и один в выходном слое.

neural_net.trainf = nl.train.train_gd #алгоритм обучения градиенту

error = neural_net.train(data, labels, epochs = 1000, show = 100, goal = 0.01) #обучаем сеть с целью изучения данных, сгенерированных выше

output = neural_net.sim(data) #запуск нейронные сети на учебных точках данных
y_pred = output.reshape(num_points)

plt.figure()
plt.plot(error)
plt.xlabel('Number of epochs')
plt.ylabel('Error')
plt.title('Training error progress')

x_dense = np.linspace(min_val, max_val, num_points * 2) #изображение фактический результата в сравнении с прогнозируемым
y_dense_pred = neural_net.sim(x_dense.reshape(x_dense.size,1)).reshape(x_dense.size)
plt.figure()
plt.plot(x_dense, y_dense_pred, '-', x, y, '.', x, y_pred, 'p')
plt.title('Actual vs predicted')
plt.show()
